
= Introduction =

It is nice, to see your application at the position/size as used last time or to have e.g. last used file loaded on a new start. Unfortunately many small application - some prototypes or internal tools - rarely offer such basic features. The reason often is the lack of time to implement such "nice-to have" stuff. This framework helps to use persistency with very minimal implementation-overhead.


= Details =
QoolPersistence consists of one singleton class Persistence. This singleton class keeps the record of instances having persistent data. On the start-up of application the persistent data is assigned to these instances and on the application exit the data is stored using Qt class QSettings. The instances having persistent data could be an integer, a QString or a QObject. In last case a persistent value is asigned to a property of the QObject.

= Example =
http://qoolpersistence.googlecode.com/svn/trunk/trunk/doc/test.png

The directory test contains an example application which utilizes the persistence feature.
The test-application has several gui-objects. Some properties of these objects are stored persistently. The size of the application as well as its position are also restored on new start. 
Try to modify some properties and restart the test application. The application should appear the same as before it was closed. And that's how it works:

main.cpp calls macro PERSISTENCE_INIT and initializes the persistence.
{{{
#include <persistence.h>                         // 1. include persistence

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    PERSISTENCE_INIT( "MyCompany", "MyAppName" ) // 2. Initialize persistence
    Test_Persistence w;
    w.setCmdLine(argv[0]);

    w.show();

    return a.exec();
}
}}}

In UI implementation test_persistence.cpp the properties of ui-objects are declared persistent using the macro PERSISTENT.
{{{
#include <persistence.h>

Test_Persistence::Test_Persistence(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::Test_Persistence)
{
    ui->setupUi(this);
                                                // 3. Declare properties as persistent
    PERSISTENT("MyGeometry", this, "geometry");  
    PERSISTENT("MyText", ui->lineEdit, "text");
    PERSISTENT("MyCurrentIndex", ui->comboBox, "currentIndex");
    PERSISTENT("CB1", ui->checkBox1, "checked");
    PERSISTENT("CB2", ui->checkBox2, "checked");
    PERSISTENT("CB3", ui->checkBox3, "checked");
    PERSISTENT("RB1", ui->radioButton1, "checked");
    PERSISTENT("RB2", ui->radioButton2, "checked");
    PERSISTENT("RB3", ui->radioButton3, "checked");
    PERSISTENT("SliderValue", ui->horizontalSlider, "value");
    PERSISTENT("CalDate", ui->calendarWidget, "selectedDate");
}}}
That's all! The properties are stored on exit and loaded on next start up.

= Important Note!= 
This software was created in the hope of being usefull. I will not take any responsibility for any harm unintentinally caused by this software, in particular for loss of data. Please use it on your own risk!

Have fun!
Valentin Heinitz, 2010-12-27, vheinitz@googlemail.com